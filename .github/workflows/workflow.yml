
name: CI/CD Setup

# Triggar workflowet vid push till huvudgrenen eller öppning av en pull request mot huvudgrenen.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Byggjobb som kompilerar och testar koden.
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        # Hämtar koden från din Git-repo.

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
        # Installerar och konfigurerar Java 17

      - name: Validate Gradle Wrapper
        run: ./gradlew wrapper --gradle-version 7.2
        # ADD: Validerar Gradle Wrapper-versionen och uppdaterar den om den är föråldrad.

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew
        # Gör Gradlew-skriptet exekverbart.

      - name: Build with Gradle
        run: ./gradlew build
        # Använder Gradle för att bygga projektet.

      - name: Test with Gradle
        run: ./gradlew test
        # Kör testerna för ditt projekt.

      - name: Upload Jar
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: build/libs/workflow-dockerimage-actions-0.0.1-SNAPSHOT.jar
        # Laddar upp byggresultatet (JAR-filen) som en artifakt.

  # Testjobbet - kör systemtester.
  run-tests:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        # Hämtar koden från Git-repot.

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
        # Installerar och konfigurerar Java 17 på testmaskinen.

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew
        # Gör Gradlew-skriptet exekverbart.

      - name: Get Jar
        uses: actions/download-artifact@v2
        with:
          name: app
          path: build/libs
        # Hämtar JAR-arten som byggdes i föregående jobb.

      - name: Run App
        run: java -jar workflow-dockerimage-actions-0.0.1-SNAPSHOT.jar &
        # Startar din Java-applikation i bakgrunden.

      - name: Run System Tests
        run: ./gradlew systemTesting
        # Kör dina systemtester mot den körande applikationen.

  # Bygger en Docker-build och pushar den till GitHub Container Registry.
  dockerize:
    runs-on: ubuntu-latest
    needs:
      - run-tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        # Hämtar koden från din Git-repo.

      - name: Download JAR Artifact
        uses: actions/download-artifact@v2
        with:
          name: app
          path: build/libs
        # Hämtar JAR-arten som byggdes i första jobbet.

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        # Loggar in på GitHub Container Registry för att kunna pusha Docker-builden.

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}
        # Bygger Docker-bilden och pushar den till GitHub Container Registry.
        # ${{ github.repository }} ersätts med namnet på ditt GitHub-repo och ${{ github.sha }} ersätts med SHA för den specifika commiten som bygget är baserat på.

        #Exempel: Om ditt GitHub-repo heter "myapp" och bygget är baserat på commit SHA "abcdef123", kommer taggen att vara ghcr.io/myapp:abcdef123. Detta gör det möjligt att enkelt identifiera och använda den specifika versionen av Docker-bilden som byggdes från den commiten.

  # Deploy-jobbet är för att deploya din applikation (kommentaren saknas i ditt ursprungliga workflow).
  deploy:
    runs-on: ubuntu-latest
    needs:
      - dockerize
    steps:
      - name: Deploy Your Application
        run: echo "This is a message from the workflow task."
        # Här kan du lägga till kommandon för att faktiskt deploya din applikation.
